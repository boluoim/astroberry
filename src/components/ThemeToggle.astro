<theme-toggle>
    <button
        id="theme-toggle"
        class="theme-toggle"
        title="Toggle light & dark"
        aria-label="auto"
        aria-live="polite"
    >
        <svg class="sun-and-moon" aria-hidden="true" width="24" height="24" viewBox="0 0 24 24">
            <circle class="sun" cx="12" cy="12" r="6" mask="url(#moon-mask)" fill="currentColor" />
            <g class="sun-beams" stroke="currentColor">
                <line x1="12" y1="1" x2="12" y2="3" />
                <line x1="12" y1="21" x2="12" y2="23" />
                <line x1="4.22" y1="4.22" x2="5.64" y2="5.64" />
                <line x1="18.36" y1="18.36" x2="19.78" y2="19.78" />
                <line x1="1" y1="12" x2="3" y2="12" />
                <line x1="21" y1="12" x2="23" y2="12" />
                <line x1="4.22" y1="19.78" x2="5.64" y2="18.36" />
                <line x1="18.36" y1="5.64" x2="19.78" y2="4.22" />
            </g>
            <mask class="moon" id="moon-mask">
                <rect x="0" y="0" width="100%" height="100%" fill="white" />
                <circle cx="24" cy="10" r="6" fill="black" />
            </mask>
        </svg>
    </button>
</theme-toggle>

<script>
    class ThemeToggle extends HTMLElement {
        constructor() {
            super()

            this.addEventListener('click', () => {
                theme.value = theme.value === 'light' ? 'dark' : 'light'
                setPreference()
            })

            this.setAttribute('aria-label', 'light')
        }
    }

    customElements.define('theme-toggle', ThemeToggle)

    const storageKey = 'theme-preference'
    
    const getPreference = () => {
        if (localStorage.getItem(storageKey)) return {value: localStorage.getItem(storageKey)!}

        // return {
        //     value: window.matchMedia('(prefers-color-scheme: dark)').matches
        //         ? 'dark'
        //         : 'light'
        // }
        return {value: 'dark'}
    }

    const setPreference = () => {
        localStorage.setItem(storageKey, theme.value)
        reflectPreference()
    }

    const reflectPreference = () => {
        document.firstElementChild?.setAttribute('data-theme', theme.value)
        document.querySelector('#theme-toggle')?.setAttribute('aria-label', theme.value)
    }

    const theme = getPreference()

    window.onload = reflectPreference

    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', ({matches:isDark}) => {
        theme.value = isDark ? 'dark' : 'light'
        setPreference()
    })
</script>

<style>
    .theme-toggle {
        --icon-size: 1.5rem;

        inline-size: var(--icon-size);
        block-size: var(--icon-size);
        aspect-ratio: 1;
        border-radius: 50%;

        cursor: pointer;
        touch-action: manipulation;
        -webkit-tap-highlight-color: transparent;
        outline-offset: 5px;

        & > svg {
            inline-size: 100%;
            block-size: 100%;
            stroke-linecap: round;
        }

        .sun-and-moon {
            & > :is(.moon, .sun, .sun-beams) {
                transform-origin: center center;
            }

            & > :is(.moon, .sun) {
                fill: var(--icon-fill);
            }

            & > .sun-beams {
                stroke: var(--icon-fill);
                stroke-width: 2px;
            }
        }

        &:is(:hover, :focus-visible) {
            .sun-and-moon {
                .sun {
                    fill: var(--icon-fill-hover);
                }

                .sun-beams {
                    stroke: var(--icon-fill-hover);
                }
            }
        }
    }
</style>

<style is:global>
    [data-theme="dark"] {
        .theme-toggle {
            .sun {
                transform: scale(1.75);
            }

            .sun-beams {
                opacity: 0;
            }

            .moon > circle {
                transform: translateX(-7px);

                @support (cx: 1) {
                    transform: translateX(0);
                    cx: 17;
                }
            }
        }
    }
</style>
